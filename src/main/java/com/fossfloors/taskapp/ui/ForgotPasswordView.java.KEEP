package com.fossfloors.taskapp.ui;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fossfloors.taskapp.backend.beans.ForgotPassword;
import com.fossfloors.taskapp.backend.service.AuthenticationService;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.Key;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.EmailField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.validator.EmailValidator;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.router.RouterLink;

@Route("forgot")
@CssImport("./styles/shared-styles.css")
@SuppressWarnings("serial")
public class ForgotPasswordView extends VerticalLayout {

  private static final Logger         logger = LoggerFactory.getLogger(ForgotPasswordView.class);

  private final AuthenticationService authService;

  private TextField                   userName;
  private EmailField                  email;

  private Binder<ForgotPassword>      binder;

  public ForgotPasswordView(AuthenticationService authService) {
    this.authService = authService;
    addClassName("forgot-password-view");
    setSizeFull();
    configureView();
    bindData();
  }

  private void configureView() {
    userName = new TextField("User");
    userName.focus();

    email = new EmailField("E-mail");

    Button resetButton = new Button("Reset Password", this::changeUserPassword);
    resetButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
    resetButton.addClickShortcut(Key.ENTER);

    RouterLink login = new RouterLink("Return to Login", LoginView.class);

    add(new H1("Forgot password"), userName, email, resetButton, login);
    setDefaultHorizontalComponentAlignment(Alignment.CENTER);
  }

  // @formatter:off
  private void bindData() {
    binder = new Binder<>(ForgotPassword.class);
    binder.setBean(new ForgotPassword());
    
    binder.forField(userName)
      .asRequired()
      .bind(ForgotPassword::getUserName, ForgotPassword::setUserName);

    binder.forField(email)
      .asRequired()
      .withValidator(new EmailValidator("Invalid e-mail address"))
      .bind(ForgotPassword::getEmail, ForgotPassword::setEmail);
  }
  // @formatter:on

  private void changeUserPassword(ClickEvent<?> event) {
    binder.validate();

    if (binder.isValid()) {
      authService.passwordRequest(binder.getBean());
    }
  }

}
